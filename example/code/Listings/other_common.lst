C51 COMPILER V9.60.0.0   OTHER_COMMON                                                      03/20/2022 19:10:42 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE OTHER_COMMON
OBJECT MODULE PLACED IN .\Objects\other_common.obj
COMPILER INVOKED BY: D:\Keil_v5_c51\C51\BIN\C51.EXE App\display\other_common.c OPTIMIZE(8,SPEED) BROWSE INCDIR(.\Bsp;.\A
                    -pp\rtc;.\Bsp\tm1650;.\Bsp\delay;.\Bsp\time;.\Bsp\iic;.\App\wifi;.\Bsp\uart;.\App\display;.\App\button;.\App\light_contro
                    -l;.\Bsp\adc;.\Bsp\eeprom) DEBUG OBJECTEXTEND PRINT(.\Listings\other_common.lst) TABS(2) OBJECT(.\Objects\other_common.ob
                    -j)

line level    source

   1          #include "STC8H.h"
   2          #include "my_type.h"
   3          #include "tm1650.h"
   4          
   5          extern _disp_buff_st   xdata    disp_data;          /* 显示数据 */
   6          extern uint16_t        xdata    linght_control_delay;
   7          
   8          void display_brightness_adjustment(void)
   9          {
  10   1         uint16_t  value;
  11   1         value = linght_level_set_min;
  12   1         if(value > 8)  value = 8;
  13   1         disp_data.grid_data[0] = value;
  14   1         value = linght_level_set_max;
  15   1         if(value > 8)  value = 8;
  16   1         disp_data.grid_data[1] = value;
  17   1         disp_data.grid_data[2] = LED_SIGE_M_;
  18   1         disp_data.grid_data[3] = disp_data.brightness%10;//实时亮度
  19   1      
  20   1         //data = light_control_adc_value;
  21   1         //if(data > 999) data=999;
  22   1         //disp_data.grid_data[1] = data/100;
  23   1         //disp_data.grid_data[2] = data/10%10;
  24   1         //disp_data.grid_data[3] = data%10;
  25   1      }
  26          
  27          
  28          /*void display_temp_compenstation(void)
  29          {
  30             int8_t  temp=0;
  31             if(temp_calbration_value <0){
  32                 temp = 0-temp_calbration_value;
  33                 disp_data.grid_data[0] = LED_SIGE_M_; //-
  34             }else{
  35                 temp = temp_calbration_value;
  36             }
  37             disp_data.grid_data[1] = temp%10;
  38             //disp_data.grid_data[2] = temp%10;
  39             disp_data.grid_data[3] = LED_SIGE_c;
  40          }*/
  41          
  42          
  43          
  44          char  cycle_numbers(void)
  45          {
  46   1        char data_disp;
  47   1        //--------------------------------
  48   1        cycle_numbers_display_count++;  
  49   1        if(cycle_numbers_display_count>50){//500ms
  50   2           cycle_numbers_display_count = 0;
  51   2           cycle_numbers_display_value++;
  52   2           ucFlag.BIT.REFRESH = true; //刷新显示
C51 COMPILER V9.60.0.0   OTHER_COMMON                                                      03/20/2022 19:10:42 PAGE 2   

  53   2           if(cycle_numbers_display_value>11){
  54   3              cycle_numbers_display_value = 0;
  55   3           }
  56   2        }
  57   1        if(cycle_numbers_display_value < 2){
  58   2            disp_data.grid_data[0] = VERSION/100;
  59   2            disp_data.grid_data[1] = LED_SIGE_M_;
  60   2            disp_data.grid_data[2] = VERSION/10%10;
  61   2            disp_data.grid_data[3] = VERSION%10;
  62   2          
  63   2        }else{
  64   2            data_disp = cycle_numbers_display_value - 2;
  65   2           //-------------------------------
  66   2            disp_data.flash = 1;
  67   2            disp_data.grid_data[0] = data_disp;
  68   2            disp_data.grid_data[1] = data_disp;
  69   2            disp_data.grid_data[2] = data_disp;
  70   2            disp_data.grid_data[3] = data_disp;
  71   2            if(data_disp == 9){
  72   3               return 1;
  73   3            }
  74   2        }
  75   1        
  76   1        return 0;
  77   1      }
  78          
  79          void display_status_success(void)
  80          {
  81   1        disp_data.grid_data[0] = LED_SIGE_S;  //S
  82   1        disp_data.grid_data[1] = LED_SIGE_U; //U
  83   1        disp_data.grid_data[2] = LED_SIGE_C; //C
  84   1        disp_data.grid_data[3] = LED_SIGE_C; //C
  85   1      }
  86          
  87          void display_status_fail(void)
  88          {
  89   1         disp_data.grid_data[0] = LED_SIGE_F;  //F
  90   1        disp_data.grid_data[1] = LED_SIGE_A;  //A
  91   1        disp_data.grid_data[2] = 1;   //I
  92   1        disp_data.grid_data[3] = LED_SIGE_L;  //L
  93   1      }
  94          
  95          void rtc_reset_disp(void)
  96          { 
  97   1         disp_data.grid_data[0] = LED_SIGE_E;  //E
  98   1         disp_data.grid_data[1] = LED_SIGE_r;  //r
  99   1         disp_data.grid_data[2] = LED_SIGE_r;  //r
 100   1         disp_data.grid_data[3] = 1;   //1
 101   1      }
 102          
 103          void ntp_success_display(void)
 104          {
 105   1         display_status_success();
 106   1         exit_ntp_state_disp++;
 107   1         if(exit_ntp_state_disp>200){//2S
 108   2             ntp_get_succ_flag = 1;
 109   2             work_status = DISP_STATE_NORMAL_DISP_MODE; //正常显示时间
 110   2             ntp_error_count = 0;
 111   2             //ntp_restart_count = 0;
 112   2             linght_control_delay = 0;
 113   2         }
 114   1      }
C51 COMPILER V9.60.0.0   OTHER_COMMON                                                      03/20/2022 19:10:42 PAGE 3   

 115          void ntp_fail_display(void)
 116          {
 117   1         display_status_fail();
 118   1         exit_ntp_state_disp++;
 119   1         if(exit_ntp_state_disp>200){//2S
 120   2             work_status = DISP_STATE_NORMAL_DISP_MODE; //正常显示时间
 121   2             ntp_get_succ_flag = 0;
 122   2             linght_control_delay = 0;
 123   2      
 124   2            /* if((ntp_error_type == 0)||
 125   2                (ntp_error_type == 2)){    // 0:NTP获取不成功  1:没有绑定WIFI  2：连接路由器失败  0、2需要重新连
             -接
 126   2      
 127   2                 ntp_error_count++;             //NTP校时失败次数
 128   2                 if(ntp_error_count < 2 ){
 129   2                     ntp_restart_count = ntp_error_count * 1000;       //10S - 50S后  NTP重新开始
 130   2                 }else{
 131   2                     ntp_error_count = 0;
 132   2                 }
 133   2             }*/
 134   2      
 135   2         }
 136   1      }
 137          
 138          /*void ntp_restart_handle(void)
 139          {
 140             if(work_status != DISP_STATE_NORMAL_DISP_MODE){  //正常显示
 141                 return;
 142             }
 143             
 144             //--------重新校时--------------
 145             if(ntp_restart_count >0){
 146                ntp_restart_count--;
 147                if(ntp_restart_count ==0){
 148                    com_notice.BIT.GET_TIME = true;   
 149                    wifi_power_off_delay = 60*100;  //60S用于时间获取
 150                }
 151             }
 152          }*/
 153          
 154          
 155          void power_on_display(void)
 156          {
 157   1         power_on_count++;
 158   1         if(power_on_count < 50){
 159   2             disp_data.grid_data[1] = LED_SIGE_Do;  //下o
 160   2             disp_data.grid_data[2] = LED_SIGE_Do;  //下o
 161   2         }else if(power_on_count < 100){
 162   2             disp_data.grid_data[1] = LED_SIGE_Uo;  //上o
 163   2             disp_data.grid_data[2] = LED_SIGE_Uo;  //上o
 164   2         }else if(power_on_count < 150){
 165   2             disp_data.grid_data[1] = LED_SIGE_Uo;  //上o
 166   2             disp_data.grid_data[2] = LED_SIGE_Uo;  //上o
 167   2             disp_data.grid_data[0] = LED_SIGE_D_;  //下_
 168   2             disp_data.grid_data[3] = LED_SIGE_D_;  //下_
 169   2         }/*else if(power_on_count < 200){
 170   1             disp_data.grid_data[1] = 24;  //上o
 171   1             disp_data.grid_data[2] = 24;  //上o
 172   1             disp_data.grid_data[0] = 17;  //中-
 173   1             disp_data.grid_data[3] = 17;  //中-
 174   1         }*/else if(power_on_count < 200){
 175   2             disp_data.grid_data[1] = LED_SIGE_Uo;  //上o
C51 COMPILER V9.60.0.0   OTHER_COMMON                                                      03/20/2022 19:10:42 PAGE 4   

 176   2             disp_data.grid_data[2] = LED_SIGE_Uo;  //上o
 177   2             disp_data.grid_data[0] = LED_SIGE_U_;  //上-
 178   2             disp_data.grid_data[3] = LED_SIGE_U_;  //上-
 179   2         }else if(power_on_count < 300){
 180   2             disp_data.grid_data[1] = LED_SIGE_Do;  //下o
 181   2             disp_data.grid_data[2] = LED_SIGE_Do;  //下o
 182   2             disp_data.grid_data[0] = LED_SIGE_U_;  //上-
 183   2             disp_data.grid_data[3] = LED_SIGE_U_;  //上-
 184   2         }else{
 185   2             power_on_count = 0;
 186   2      
 187   2             if(power_on_state == 11){    //开机接收状态  其他：正常开机  11：成功   22：失败
 188   3                 work_status = DISP_STATE_NTP_SUCCESS;  //校时成功
 189   3                 exit_ntp_state_disp = 0;
 190   3      
 191   3             }else if(power_on_state == 22){
 192   3                 work_status = DISP_STATE_NTP_FAIL;  //校时失败
 193   3                 exit_ntp_state_disp = 0;
 194   3      
 195   3             }else{
 196   3                  work_status = DISP_STATE_NORMAL_DISP_MODE;  // 正常显示
 197   3             }
 198   2            
 199   2         }
 200   1       
 201   1      }
 202          
 203          /*
 204          void display_temp_calbration(void)
 205          {
 206          
 207             if(temp_calbration_value < 50){
 208                 disp_data.grid_data[0] = 17; //-
 209                 disp_data.grid_data[1] = (50-temp_calbration_value)/10%10;
 210                 disp_data.grid_data[2] = 21;
 211                 disp_data.grid_data[3] = (50-temp_calbration_value)%10;
 212             }else{
 213                 // disp_data.grid_data[0] = 17; //-
 214                 disp_data.grid_data[1] = (temp_calbration_value-50)/10%10;
 215                 disp_data.grid_data[2] = 21;
 216                 disp_data.grid_data[3] = (temp_calbration_value-50)%10;    
 217             }
 218             //-----------------------
 219             exit_temp_calbration++;
 220             if(exit_temp_calbration > 500){ //5S
 221                work_status = DISP_STATE_TIME; //正常显示时间
 222                storage_delay = 10;//100ms后进行存储
 223             }
 224          }
 225          */
 226          
 227          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    536    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
C51 COMPILER V9.60.0.0   OTHER_COMMON                                                      03/20/2022 19:10:42 PAGE 5   

END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
